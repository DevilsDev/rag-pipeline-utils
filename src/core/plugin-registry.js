/**
 * Version: 0.1.0
 * Path: /src/core/create-pipeline.js
 * Description: Factory function to create a RAG pipeline instance with dynamically resolved components
 * Author: Ali Kahwaji
 */

import { PluginRegistry } from './plugin-registry.js';

// Shared singleton instance of plugin registry
const registry = new PluginRegistry();

/**
 * Factory function to construct a RAG pipeline instance.
 * 
 * SOLID Compliance:
 * - SRP: Only responsible for assembling and exposing the pipeline interface
 * - DIP: Depends on plugin interfaces, not concrete implementations
 * - OCP: New plugins can be added without modifying this factory
 *
 * @param {Object} config - Configuration mapping plugin types to implementation keys
 * @param {string} config.loader - Loader plugin name
 * @param {string} config.embedder - Embedder plugin name
 * @param {string} config.retriever - Retriever plugin name
 * @param {string} config.llm - LLM plugin name
 * @returns {Object} - Pipeline with `ingest(path)` and `query(prompt)` methods
 */
export function createRagPipeline({ loader, embedder, retriever, llm }) {
  return {
    /**
     * Ingest a document, chunk it, embed it, and store vectors in the retriever.
     * @param {string} path - File or folder path
     */
    async ingest(path) {
      const loaderInstance = registry.get('loader', loader);
      const embedderInstance = registry.get('embedder', embedder);
      const retrieverInstance = registry.get('retriever', retriever);

      const documents = await loaderInstance.load(path);
      const chunks = documents.flatMap(doc => doc.chunk());
      const vectors = await embedderInstance.embed(chunks);
      await retrieverInstance.store(vectors);
    },

    /**
     * Query the retriever with a prompt, retrieve relevant context, and generate an LLM response.
     * @param {string} prompt - Query text
     * @returns {Promise<string>} - Answer generated by the LLM
     */
    async query(prompt) {
      const embedderInstance = registry.get('embedder', embedder);
      const retrieverInstance = registry.get('retriever', retriever);
      const llmInstance = registry.get('llm', llm);

      const queryVector = await embedderInstance.embedQuery(prompt);
      const retrievedDocs = await retrieverInstance.retrieve(queryVector);
      return llmInstance.generate(prompt, retrievedDocs);
    }
  };
}

export { registry };

